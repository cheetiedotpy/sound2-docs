{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"What is Sound2 ?","text":"<p>Sound2 is simple and highly perfomance roblox sound wrapper. It provides you ability to manage your currently playing sounds, make them interract with eachother in a way that allows you to easily set which sounds will take control over other sounds by deafening them.</p>"},{"location":"#where-can-i-use-sound2","title":"Where can I use Sound2 ?","text":"<p>Sound2 is suitable for all scenarios where you use sounds in your game, as it provides you fully control over the roblox instance.</p>"},{"location":"#why-sound2","title":"Why Sound2 ?","text":"<p>Sound2 is very easy to use, and got no alternatives at all. It's your choice to use it or not. </p>"},{"location":"api/","title":"API","text":""},{"location":"api/#types","title":"Types","text":""},{"location":"api/#sound2config","title":"Sound2Config","text":"<pre><code>type Sound2Config = {\n    LoadingTimeout: number?,\n    SoundRemovalDelay: number?,\n    ParentObject: Instance?,\n    SoundsDictionary: { [string]: string }?\n}\n</code></pre>"},{"location":"api/#sound2properties","title":"Sound2Properties","text":"<pre><code>type Sound2Properties = {\n    SoundId: string,\n    Priority: number,\n    VolumeChangeType: number,\n    VolumeChangeTime: number,\n    Volume: number,\n    MuteOthers: boolean,\n    StartDelay: number,\n    MutedVolume: number,\n    Parent: Instance,\n}\n</code></pre>"},{"location":"api/#soundproperties","title":"SoundProperties","text":"<pre><code>type SoundProperties = {\n    Archivable: boolean;\n    Name: string;\n    Parent: Instance;\n    PlayOnRemove: boolean;\n    RollOffMaxDistance: number;\n    RollOffMinDistance: number;\n    RollOffMode: Enum.RollOffMode;\n    Looped: boolean;\n    PlaybackRegionsEnabled: boolean;\n    PlaybackSpeed: number;\n    Playing: boolean;\n    TimePosition: number;\n    SoundGroup: SoundGroup;\n}\n</code></pre>"},{"location":"api/#sound2-module","title":"Sound2 Module","text":""},{"location":"api/#sound2volumechangetype","title":"Sound2.VolumeChangeType","text":"<p><pre><code>Sound2.VolumeChangeType = {Smooth = 1, Instant = 2}\n</code></pre> A Table that represents VolumeChangeType Enum.</p>"},{"location":"api/#sound2new","title":"Sound2.new()","text":"<p><pre><code>Sound2.new(ObjectProps : Sound2Properties, RobloxProps : SoundProperties) =&gt; Sound2\n</code></pre> Constructs the Sound2 Instance.</p>"},{"location":"api/#sound2getglobalconfig","title":"Sound2.GetGlobalConfig()","text":"<p><pre><code>Sound2.GetGlobalConfig() =&gt; {} : Sound2Config\n</code></pre> Returns a copy of the current global config.</p>"},{"location":"api/#sound2setglobalconfig","title":"Sound2.SetGlobalConfig()","text":"<p><pre><code>Sound2.SetGlobalConfig(Config : Sound2Config) =&gt; void\n</code></pre> Sets the current global config.</p> <p>Note</p> <p>You don't need to specify all the properties of the config, works exactly the same like the properties table.</p>"},{"location":"api/#sound2getallplayingsounds","title":"Sound2.GetAllPlayingSounds()","text":"<p><pre><code>Sound2.GetAllPlayingSounds() =&gt; {Sound2}\n</code></pre> Returns a table with all the currently playing <code>Sound2</code> Instances.</p>"},{"location":"api/#sound2play","title":"Sound2:Play()","text":"<p><pre><code>Sound2:Play(WaitForLoading : boolean?) =&gt; void\n</code></pre> Plays the current <code>Sound2</code> Instance. Will not stop automatically if <code>Roblox Instance</code> is <code>.Looped</code></p>"},{"location":"api/#sound2pause","title":"Sound2:Pause()","text":"<p><pre><code>Sound2:Pause() =&gt; void\n</code></pre> Pauses the current Instance if playing. Can only be resumed by <code>Sound2:Resume()</code></p> <p>Warning</p> <p>Using <code>:Play()</code> is used on a paused Instance will create a new <code>Roblox Sound Instance</code> Avoid using <code>:Play()</code> on paused Instances!</p>"},{"location":"api/#sound2resume","title":"Sound2:Resume()","text":"<p><pre><code>Sound2:Resume() =&gt; void\n</code></pre> Resumes the <code>Sound2</code> Instance if paused.</p>"},{"location":"api/#sound2stop","title":"Sound2:Stop()","text":"<p><pre><code>Sound2:Stop() =&gt; void\n</code></pre> Stops the current <code>Sound2</code> Instance if playing.</p>"},{"location":"api/#sound2setcallback","title":"Sound2:SetCallback()","text":"<p><pre><code>Sound2:SetCallback(EventName : string, Callback : () =&gt; void) =&gt; void\n</code></pre> <code>:Connect()</code>'s the provided <code>callback function</code> with the <code>Roblox Sound Instance</code> event on creation.</p>"},{"location":"api/#sound2removecallback","title":"Sound2:RemoveCallback()","text":"<p><pre><code>Sound2:RemoveCallback(EventName : string) =&gt; void\n</code></pre> Unbinds the event from a function.</p>"},{"location":"api/#sound2adjustvolume","title":"Sound2:AdjustVolume()","text":"<p><pre><code>Sound2:AdjustVolume(NewVolume : number) =&gt; void\n</code></pre> Sets the <code>Sound2 Instance</code>'s volume. Respects current <code>Sound2.VolumeChangeType</code></p>"},{"location":"tutorial/basicusage/","title":"Basic Usage","text":"<p>First of all, let's import the module and create a <code>Sound2 object</code>: <pre><code>local Sound2 = require(game.ReplicatedStorage.Sound2)\n\nlocal BGMusic = Sound2.new()\n</code></pre></p>"},{"location":"tutorial/basicusage/#new-constructor-accepts-2-optional-arguments","title":".new() Constructor accepts 2 optional arguments:","text":"<ul> <li>Sound2 properties table</li> <li>Roblox Instance properties table</li> </ul> <p>If they arguments are not set at all, or the table lacks some arguments they will be set to default. (1) This is the main rule you should remember: If you don't specify something in the properties table, it will be sent to default.</p> <p>Note</p> <p>There is a set list of <code>Sound2 Object-Only</code> properties that can be seen in API. If you will try to put a <code>Sound2 Object-Only</code> property into the <code>Roblox Sound Object</code> properties table, It will be overwritten by the default <code>Sound2 Object</code> property.</p> <p>Knowing that, we can create a new <code>Sound2 object</code> with specifying some properties we need. For example, let's set the volume to 2, give it a Sound Id and play our sound: <pre><code>local Sound2 = require(game.ReplicatedStorage.Sound2)\n\nlocal BGMusic = Sound2.new({\n    Volume = 2,\n    SoundId = \"rbxassetid://9112854440\"\n})\n\nBGMusic:Play()\n</code></pre> Okay, great. If we play the game our sound plays once, but let's make it looped. Looped is not a property of <code>Sound2 Object</code>, so we will need to provide it to a <code>Roblox Instance</code> via our second properties table: <pre><code>local Sound2 = require(game.ReplicatedStorage.Sound2)\n\nlocal BGMusic = Sound2.new({\n    Volume = 2,\n    SoundId = \"rbxassetid://9112854440\"\n}, {\n    Looped = true\n})\n\nBGMusic:Play()\n</code></pre></p>"},{"location":"tutorial/callbacks/","title":"Callbacks","text":"<p>Callbacks in Sound2 allow you to connect any <code>Roblox Sound Instance</code> events to your own function, without accessing the instance itself. You can set callbacks via the built-in method of the <code>Sound2 Instance</code> itself. <pre><code>local Sound2 = require(game.ReplicatedStorage.Sound2)\n\nlocal MySound = Sound2.new({\n    SoundId = \"rbxassetid://9112854440\",\n    VolumeChangeType = Sound2.VolumeChangeType.Smooth\n})\n\nMySound:SetCallback(\"Ended\", function()\n    print(\"The sound has ended!\")\nend)\n\nMySound:Play()\n</code></pre></p> <p>Note</p> <p>You can only bind one function to a certain event, if you will try to do it twice, the newest function will be called.</p> <p>To remove a callback, use another built-in method: <pre><code>local Sound2 = require(game.ReplicatedStorage.Sound2)\n\nlocal MySound = Sound2.new({\n    SoundId = \"rbxassetid://9112854440\",\n    VolumeChangeType = Sound2.VolumeChangeType.Smooth\n})\n\nMySound:SetCallback(\"Ended\", function()\n    print(\"The sound has ended!\")\nend)\n\nMySound:Play()\n\nMySound:RemoveCallback(\"Ended\")\n</code></pre></p>"},{"location":"tutorial/download/","title":"Quick Setup","text":"<p>Sound2 is a single module script without any dependencies, so you basically have 2 ways of installing it.</p>"},{"location":"tutorial/download/#option-1-roblox-library","title":"Option #1: Roblox Library","text":"<p>Download the module from roblox library and put it inside any client/shared storage. </p>"},{"location":"tutorial/download/#option-2-wally-rojo","title":"Option #2: Wally + Rojo","text":"<p>If you are using Rojo and Wally you can install it as a dependency by using this line:</p> <p><code>sound2 = \"cheetiedotpy/sound2@0.1.0\"</code></p> <p>After saving the file, run the install command:</p> <p><code>wally install</code></p>"},{"location":"tutorial/mutedvolume/","title":"Muted Volume","text":"<p><code>Muted Volume</code> is a <code>Volume</code> value that Sound2 considers deafened or muted. Changing this is useful when you want the sound to not be muted fully. <pre><code>local Sound2 = require(game.ReplicatedStorage.Sound2)\n\nfunction Explode()\n    local Explosion = Sound2.new({\n        Volume = 2,\n        Priority = 2,\n        MuteOthers = true,\n        SoundId = \"rbxassetid://9120020523\"\n    })\n\n    Explosion:Play()\nend\n\nlocal BGMusic = Sound2.new({\n    SoundId = \"rbxassetid://9112854440\",\n    MutedVolume = .5\n})\n\nBGMusic:Play()\n\ntask.delay(15, Explode)\nMySound:Play()\n</code></pre> In this case when the explosion happens volume of background music will decrease to .5</p>"},{"location":"tutorial/priorities/","title":"Priorities","text":"<p><code>Priority</code> is a property that allows us to control and mute other sounds, while current sound is playing. For example, let's make an explosion that mutes our background music for more immersion. We'll start off by creating an explosion sound: <pre><code>local Sound2 = require(game.ReplicatedStorage.Sound2)\n\nlocal Explosion = Sound2.new({\n    Volume = 2,\n    Priority = 2,\n    MuteOthers = true,\n    SoundId = \"rbxassetid://9120020523\"\n})\n</code></pre> As you can see, we have created a <code>Sound2 Object</code> with <code>priority</code> set to 2.</p> <p>Note</p> <p>By default, every <code>Sound2 Object's</code> <code>priority</code> is set to 1</p> <p><code>Mute Others</code> is a property that deafens all the currently playing sounds with lower <code>Priority</code>. They will automatically unmute again on completion of our explosion sound. Let's make a background music sound and put our explosion sound inside a function: <pre><code>local Sound2 = require(game.ReplicatedStorage.Sound2)\n\nfunction Explode()\n    local Explosion = Sound2.new({\n        Volume = 2,\n        Priority = 2,\n        MuteOthers = true,\n        SoundId = \"rbxassetid://9120020523\"\n    })\n\n    Explosion:Play()\nend\n\nlocal BGMusic = Sound2.new({\n    SoundId = \"rbxassetid://9112854440\"\n})\n\nBGMusic:Play()\n\ntask.delay(15, Explode)\n</code></pre> As we can see, after 15 seconds our music automatically mutes itself and the explosion sound plays.</p>"},{"location":"tutorial/smoothing/","title":"Smoothing It Out","text":"<p>Let's smooth our transition between muting and unmuting a sound, so it won't be instant. We will achieve that by setting some properties: <pre><code>local Sound2 = require(game.ReplicatedStorage.Sound2)\n\nlocal MySound = Sound2.new({\n    SoundId = \"rbxassetid://9112854440\",\n    VolumeChangeType = Sound2.VolumeChangeType.Smooth\n})\n\nMySound:Play()\n</code></pre> To set a time duration of the transition, we simply just set another property:</p> <p>Note</p> <p>By the default, time is set to 0.25</p> <pre><code>local Sound2 = require(game.ReplicatedStorage.Sound2)\n\nlocal MySound = Sound2.new({\n    SoundId = \"rbxassetid://9112854440\",\n    VolumeChangeType = Sound2.VolumeChangeType.Smooth,\n    VolumeChangeTime = 2\n})\n\nMySound:Play()\n</code></pre>"},{"location":"tutorial/soundsdict/","title":"Sounds Dictionary","text":"<p><code>Sounds Dictionary</code> is a table, that can be used to not type in actual roblox sound id everytime you create a sound. It is located inside global module settings, so we will be using a built-in static method to set it: <pre><code>local Sound2 = require(game.ReplicatedStorage.Sound2)\n\nSound2.SetGlobalConfig({\n    SoundsDictionary = {\n        Rain = \"rbxassetid://9112854440\",\n    }\n})\n</code></pre> From this moment, you can use the keyword \"Rain\" inside a sound id, and it will refer to the actual roblox asset id you specified: <pre><code>local Sound2 = require(game.ReplicatedStorage.Sound2)\n\nSound2.SetGlobalConfig({\n    SoundsDictionary = {\n        Rain = \"rbxassetid://9112854440\",\n    }\n})\n\nlocal MySound = Sound2.new({\n    SoundId = \"Rain\",\n})\n\nMySound:Play()\n</code></pre></p> <p>Note</p> <p>You don't need to set the dictionary in every script, you can do it only once.</p>"}]}